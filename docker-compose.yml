version: '3.8'

networks:
  default:
    name: ${COMPOSE_PROJECT_NAME}_network
    driver: bridge

services:
  django:
    image: shly-uz-chat-backend:latest
    build:
      context: .
    container_name: ${COMPOSE_PROJECT_NAME}-django
    volumes:
      - ./:/app
      - static_volume:/app/static
      - media_volume:/app/media
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    command: poetry run gunicorn core.wsgi:application --bind 0.0.0.0:${DJANGO_PORT}
    ports:
      - ${DJANGO_PORT}:${DJANGO_PORT}
    restart: always

  postgres:
    image: postgres:15-alpine
    container_name: ${COMPOSE_PROJECT_NAME}-postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_HOST: ${DB_HOST}
      POSTGRES_PORT: ${DB_PORT}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    restart: always

  redis:
    image: redis:6.2-alpine
    container_name: ${COMPOSE_PROJECT_NAME}-redis
    restart: always

  daphne:
    image: shly-uz-chat-backend:latest
    container_name: ${COMPOSE_PROJECT_NAME}-daphne
    volumes:
      - ./:/app
    env_file:
      - .env
    depends_on:
      - django
    command: poetry run daphne core.asgi:application -b 0.0.0.0 -p ${DAPHNE_PORT}
    ports:
      - ${DAPHNE_PORT}:${DAPHNE_PORT}
    restart: always

  cworker:
    image: shly-uz-chat-backend:latest
    container_name: ${COMPOSE_PROJECT_NAME}-cworker
    depends_on:
      - django
      - redis
    command: poetry run celery -A core worker -Q lightweight-tasks
    restart: always

volumes:
  postgres_data: { }
  static_volume: { }
  media_volume: { }
